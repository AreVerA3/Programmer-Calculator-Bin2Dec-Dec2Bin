;Name    : Audrey Vera Anak Tap (82448)
;Project : Computer Architecture Programmer Calculator (Binary to Decimal & Decimal to Binary)
;Date    : 16 June 2023

section .data
    ; Main menu
    msg_menu db 'Number Conversion Program', 0xA, 
             db '1. Decimal to Binary', 0xA, 
             db '2. Binary to Decimal', 0xA, 
             db 'Enter option (1-2) : ', 0

    ; Prompt the user
    msg_decimal db 'Enter a decimal number: ', 0
    msg_binary db 'Enter a binary number: ', 0
             
    ; Show result
    msg_binary_equivalent db 'Binary equivalent: ', 0
    msg_decimal_equivalent db 'Decimal equivalent: ', 0
    newline db 10, 0

section .bss
    option_input resb 2
    
    ; For conversion from decimal
    num resb 6
    binary resb 17  ; Increase size to store 16 bits + null terminator
    decimal resb 5 ; Increase size to store 4 digits + null terminator

section .text
    global _start

_start:
    ; Display menu
    mov eax, 4
    mov ebx, 1
    mov ecx, msg_menu
    mov edx, 90
    int 0x80

menu_input:
    ; Read user's option
    mov eax, 3
    mov ebx, 0
    mov ecx, option_input
    mov edx, 2
    int 0x80

    ; Convert the option to an integer
    mov al, [option_input]
    sub al, '0'
    movzx eax, al

    ; Execute the selected option
    cmp eax, 1
    je decimal_to_binary
    cmp eax, 2
    je binary_to_decimal

exit_program:
    ; Exit the program
    mov eax, 1
    xor ebx, ebx
    int 0x80

; For option 1, convert Decimal to Binary
decimal_to_binary:
    ; Print prompt for decimal input
    mov eax, 4
    mov ebx, 1
    mov ecx, msg_decimal
    mov edx, 24
    int 0x80

read_user_input: 
    ; Read decimal number
    mov eax, 3
    mov ebx, 0
    mov ecx, num
    mov edx, 5
    int 0x80

    ; Convert ASCII string to an integer
    xor eax, eax
    xor ebx, ebx

convert_to_integer:
    movzx ecx, byte [num + ebx]
    cmp ecx, '0'
    jb end_convert_to_integer
    cmp ecx, '9'
    ja end_convert_to_integer
    sub ecx, '0'
    imul eax, 10
    add eax, ecx
    inc ebx
    jmp convert_to_integer
    
end_convert_to_integer:
    ; Convert the number to binary
    mov ecx, 16
    mov ebx, eax
    
convert_to_binary:
    xor edx, edx
    mov edi, 2
    div edi
    add dl, '0'
    dec ecx
    mov [binary + ecx], dl
    test eax, eax
    jnz convert_to_binary

    ; If output is not 16 bits yet, pad with zeros
pad_with_zero:
    dec ecx
    cmp ecx, -1
    jz print_binary_result
    mov byte [binary + ecx], '0'
    jmp pad_with_zero

print_binary_result:
    ; Display binary equivalent
    mov eax, 4
    mov ebx, 1
    mov ecx, msg_binary_equivalent
    mov edx, 19
    int 0x80

    ; Print the binary number
    mov eax, 4
    mov ebx, 1
    mov ecx, binary
    mov edx, 17
    int 0x80
    
    ; Print a new line
    mov eax, 4
    mov ebx, 1
    mov ecx, newline
    mov edx, 1
    int 0x80

    jmp _start
 
; For option 2, convert binary to decimal
binary_to_decimal:
    ; Display prompt for decimal input
    mov eax, 4
    mov ebx, 1
    mov ecx, msg_binary
    mov edx, 24
    int 0x80
    
    ; Read binary number
    mov eax, 3
    mov ebx, 0
    mov ecx, num
    mov edx, 5
    int 0x80

    ; Convert ASCII string to an integer
    xor eax, eax
    xor ebx, ebx

convert_to_integer2:
    movzx ecx, byte [num + ebx]
    cmp ecx, '0'
    jb end_convert_to_integer2
    cmp ecx, '1'  ; Update comparison to '1'
    ja end_convert_to_integer2
    sub ecx, '0'
    imul eax, 2  ; Multiply by 2 instead of 10
    add eax, ecx
    inc ebx
    jmp convert_to_integer2
    
end_convert_to_integer2:
    ; Convert the integer to decimal
    mov ecx, 4
    mov ebx, eax
    
convert_to_decimal:
    xor edx, edx
    mov edi, 10  ; Change divisor to 10 for decimal conversion
    div edi
    add dl, '0'
    dec ecx
    mov [decimal + ecx], dl
    test eax, eax
    jnz convert_to_decimal

    ; Display decimal equivalent
    mov eax, 4
    mov ebx, 1
    mov ecx, msg_decimal_equivalent
    mov edx, 23 
    int 0x80

    ; Print the decimal number
    mov eax, 4
    mov ebx, 1
    mov ecx, decimal
    mov edx, 5  ; Increase size to print 4 digits + null terminator
    int 0x80
    
    ; Print a new line
    mov eax, 4
    mov ebx, 1
    mov ecx, newline
    mov edx, 1
    int 0x80

    jmp _start
